# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Development Commands

### Essential Commands
- `./scripts/setup.sh` - One-time setup: installs dependencies, generates project, sets up pre-commit hooks
- `./scripts/build.sh` - Build the app (add `--device` for device builds)  
- `./scripts/test.sh` - Run unit tests (add `--ui` for UI tests, `--all` for both)
- `./scripts/lint.sh` - Check code style with SwiftLint and SwiftFormat
- `./scripts/format.sh --fix` - Auto-fix code formatting issues
- `./scripts/preflight.sh` - Full local CI check: fixes formatting, runs linting, and tests
- `xcodegen` - Regenerate Xcode project from project.yml (if project structure changes)

### Project Generation
This project uses XcodeGen. The Xcode project file is generated from `project.yml`. Always run `xcodegen` after modifying project.yml or adding/removing files.

## Architecture Overview

### Core Structure
- **{{ARCHITECTURE}}**: {{ARCHITECTURE_DESCRIPTION}}
- **{{ARCHITECTURE}} Pattern**: {{PATTERN_DESCRIPTION}}
- **XcodeGen Project**: Project structure defined in `project.yml`, not manually managed

### Key Components
{{KEY_COMPONENTS}}

### Data Flow
{{DATA_FLOW_DESCRIPTION}}

### {{PROJECT_NAME}} Specific Features
{{PROJECT_SPECIFIC_FEATURES}}

## Code Style
- SwiftLint configured for iOS development best practices
- SwiftFormat enforces consistent spacing, imports, and code organization
- 2-space indentation, 120 character line width
- Self insertion required in closures for clarity

## Testing Strategy
- Unit tests in `{{PROJECT_NAME}}Tests/` mirror main app structure
- UI tests in `{{PROJECT_NAME}}UITests/` for user interaction flows
- Test simulators configured in `simulator.yml`
- Use `./scripts/test.sh` for running tests with proper simulator selection

## Simulator Management
- Simulator configuration in `simulator.yml`
- Use `./scripts/simulator.sh --config-tests "device"` to update test simulator
- Use `./scripts/simulator.sh --config-ui-tests "device"` to update UI test simulator
- Scripts automatically detect optimal OS version and architecture

## Common Tasks

### Adding New Features
1. Create models in `{{PROJECT_NAME}}/Models/`
2. Create views in `{{PROJECT_NAME}}/Views/`
3. Create view models in `{{PROJECT_NAME}}/ViewModels/`
4. Add corresponding tests in `{{PROJECT_NAME}}Tests/`
5. Update `project.yml` if new files/groups are needed
6. Run `xcodegen` to regenerate project

### Before Committing
1. Run `./scripts/preflight.sh` to ensure code quality
2. Verify all tests pass
3. Check that build succeeds for both simulator and device

### Debugging Build Issues
1. Clean build folder: Product â†’ Clean Build Folder (Cmd+Shift+K)
2. Regenerate project: `xcodegen`
3. Check `project.yml` for configuration issues
4. Verify all dependencies are installed: `brew bundle check`