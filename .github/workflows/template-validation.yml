name: Template Validation

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  validate-template:
    name: Template End-to-End Validation
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if this is the template repository
        id: repo_check
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          if [[ "$GITHUB_REPOSITORY" == *"/SwiftProjectTemplate" ]]; then
            echo "✅ This is the SwiftProjectTemplate repository - proceeding with validation"
            echo "is_template_repo=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️  This is a generated project repository - skipping template validation"
            echo "💡 Template validation only runs on the SwiftProjectTemplate repository"
            echo "is_template_repo=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Xcode
        if: steps.repo_check.outputs.is_template_repo == 'true'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.0"

      - name: Cache Homebrew packages
        if: steps.repo_check.outputs.is_template_repo == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('**/Brewfile') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Install dependencies
        if: steps.repo_check.outputs.is_template_repo == 'true'
        run: |
          # Install Homebrew dependencies
          brew bundle install --file=./Brewfile

          # Verify installations
          echo "Installed versions:"
          swiftlint --version
          swiftformat --version
          xcodegen --version
          yq --version

      - name: Generate test project
        if: steps.repo_check.outputs.is_template_repo == 'true'
        run: |
          echo "🏗️ Generating test project for E2E validation..."
          echo "Working directory: $(pwd)"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"

          # Create test directory but run setup from template root
          mkdir -p ci-test-project
          ./scripts/dev-sync.sh to ci-test-project

          echo "Running setup script from template root directory"
          echo "Target directory: $(pwd)/ci-test-project"

          cd ci-test-project

          echo "🚀 Running setup script to generate test project..."
          ./scripts/setup.sh \
            --project-name "CITestApp" \
            --bundle-id-root "com.ci.test" \
            --deployment-target 18.0 \
            --swift-version 5.10 \
            --test-framework "swift-testing" \
            --source-language en \
            --no-git-hooks \
            --no-commit \
            --public \
            --skip-brew \
            --force || {
              echo "❌ Setup script failed with exit code $?"
              echo "💡 For detailed debugging, enable ACTIONS_STEP_DEBUG in repository settings"
              exit 1
            }

          echo "✓ Test project generated successfully"
          echo "Generated files:"
          ls -la

      - name: Run E2E validation on generated project
        if: steps.repo_check.outputs.is_template_repo == 'true'
        run: |
          echo "🔍 Running end-to-end validation on generated project..."
          cd ci-test-project

          # Run the generated project's preflight check
          echo "Running preflight check..."
          ./scripts/preflight.sh

          echo "✓ E2E validation completed successfully"

      - name: Cleanup test project
        if: always() && steps.repo_check.outputs.is_template_repo == 'true'
        run: |
          echo "🧹 Cleaning up test project..."
          rm -rf ci-test-project
          echo "✓ Cleanup completed"

      - name: Template validation summary
        if: steps.repo_check.outputs.is_template_repo == 'true'
        run: |
          echo "🎉 Template Validation Complete!"
          echo ""
          echo "✅ Template generates project successfully"
          echo "✅ Generated project passes all quality checks"
          echo "✅ E2E workflow validated"
          echo ""
          echo "Template is ready for use! 🚀"

      - name: Generated repository info
        if: steps.repo_check.outputs.is_template_repo == 'false'
        run: |
          echo "🎉 Welcome to your new iOS project!"
          echo ""
          echo "This repository was created from SwiftProjectTemplate."
          echo "Template validation is skipped for generated projects."
          echo ""
          echo "📖 Next steps:"
          echo "  1. Run './scripts/setup.sh' to configure your project"
          echo "  2. Follow the README.md for development guidance"
          echo "  3. Start building your iOS app!"
          echo ""
          echo "✨ Happy coding! 🚀"
